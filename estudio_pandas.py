# -*- coding: utf-8 -*-
"""Estudio pandas

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Q-r0GNxXBrNdifXhGXfxho08BB5nh_W

Importamos la libreria pandas y hacemos una lectura de nuestro archivo.

Hacemos una copia para no modificar el archivo original y trabajamos sobre la copia
"""

import pandas as pd #llamamos a la libreria pandas
import matplotlib.pyplot as plt #llamamos a la libreria matplotlib para graficar
dataframe = pd.read_csv("imdb_pelis.csv", na_values='\\N')
#leemos nuestro archivo csv y cambiamos los valores \N (no tiene valor definido) por lo que reemplazamos con nan para poder realizar calculos

#creamos una funcion para llamar una copia del dataframe original para no afectar el original en cada analisis
def df_peliculas():
    return dataframe.copy()

dataframe.info()

df_peliculas().info()

data = df_peliculas()
data





"""###1 ANALISIS DE DURACIÓN"""

#creamos una copia del dataframe para el analisis de duracion
#como ya cambiamos los valores N por valores Nan, podemos usar mean y std para calcular promedio y desviacion
#en el print redondeamos las cifras a dos decimales para una lectura mas amigable
df1 = df_peliculas()

prom_duracion = df1['runtimeMinutes'].mean()
desv_duracion = df1['runtimeMinutes'].std()

print('El promedio de la duración de las películas analizadas es de:', round(prom_duracion, 2), 'minutos')
print('La desviación estándar de la duración de las películas analizadas es de:', round(desv_duracion, 2), 'minutos')

"""###2 ANALISIS DE PUNTAJES"""

#Al igual que en el analsis anterior, hacemos copia del dataframe original llamando a nuestra funcion df_movies y calculamos directamente al cambiar N por Nan.
df2 = df_peliculas()

prom_puntaje = df2['averageRating'].mean()
desv_puntaje = df2['averageRating'].std()

print('El promedio del puntaje de las películas analizadas es de:', round(prom_puntaje, 2), 'estrellas de 10')
print('La desviación estándar del puntaje de las películas analizadas es de:', round(desv_puntaje, 2), 'estrellas de 10')

"""###3 ANALISIS DE DIRECTORES/AS"""

#3.1 Promedio y desviación estándar de la cantidad de películas que dirige un mismo director/a
df3 = df_peliculas()

#Eliminamos los valores nulos de la columna director para que no afecten los resultados
directores = df3.dropna(subset=['Director_name','averageRating'])

#Agrupamos los directores y contamos cuantas peliculas hizo cada director
pelixdirector = directores.groupby('Director_name')['primaryTitle'].count()

#Realizamos los calculos de los valores que obtuvimos anteriormente
prom_pelixdirector = pelixdirector.mean()
desvn_pelixdirector = pelixdirector.std()

print("El promedio de películas por director es de: ", round(prom_pelixdirector, 2),'películas')
print("La desviación estándar de las películas por director es de:", round(desvn_pelixdirector, 2),'películas')

#3.2 Indique los 20 directores, con el mejor puntaje promedio de sus películas (considere solo directores que hayan dirigido 5 o más películas)
# Filtramos los directores con 5 o mas peliculas
director5 = pelixdirector[pelixdirector >= 5]

# Calculamos el puntaje promedio de los directores que han dirigido 5 o mas películas
mejores_directores = directores[directores['Director_name'].isin(director5.index)] \
    .groupby('Director_name')['averageRating'].mean().sort_values(ascending=False).head(20)

print('El promedio de los mejores directores de imbd y sus puntajes son :')
print(round(mejores_directores,2))

"""###4 ANALISIS TEMPORAL"""

#4.1Distribuir las películas por año y calcular cuántas se lanzan cada año.
# Filtrar las películas hasta el año 2024
df4 = df_peliculas()
peli2024 = df4[df4['startYear'] <= 2024]

# Contar cuántas películas se lanzan cada año
pelixanio = peli2024['startYear'].value_counts().sort_index()

print("Cantidad de películas lanzadas por año desde 1951 hasta 2024:")
pelixanio

#4.2 Cantidad de películas cuyo título es igual al título original por año
# Contar cuántas películas tienen el mismo título que el título original
peli_igual = df4[df4['primaryTitle'] == df4['originalTitle']].shape[0]

# Contar el total de películas analizadas haciendo un conteo del total de la lista
total_peli = df4.shape[0]

print('Cantidad de películas cuyo título es igual al título original :', peli_igual,'de un total de ',total_peli,'peliculas analizadas')

"""###5 ANALISIS DE GENEROS"""

#Muestre la estadística anual para cada tipo diferente de género
#Muestre la estadística anual para las películas en función de su género principal (el primero)
#Analice la dispersión de las combinaciones de pares de género (para las películas que tienen 2 o más géneros)

#5.1 Muestre la estadística anual para cada tipo diferente de género
df5 = df_peliculas()

#filtramos hasta el año 2024
df5 = df5[df5['startYear'] <= 2024]
#eliminamos todas las filas que contengan datos vacios
anio_inicio = df5.dropna(subset=['startYear'])

#dividimos los generos de la columna anio_inicio en listas
anio_inicio['genres'] = anio_inicio['genres'].str.split(',')

# Utilizamos explode para crear una nueva fila por cada género de cada película
generos = anio_inicio.explode('genres')

# Agrupamos por 'startYear' y 'genres' para obtener la estadística
generosxanio = generos.groupby(['startYear', 'genres']).size().reset_index(name='cant_peli')

# Si deseas ver la estadística
print(generosxanio)

import pandas as pd
import matplotlib.pyplot as plt

# Suponiendo que ya tienes tu DataFrame df5 como antes
df5 = df_peliculas()

# Filtramos hasta el año 2024
df5 = df5[df5['startYear'] <= 2024]
# Eliminamos filas con datos vacíos
anio_inicio = df5.dropna(subset=['startYear', 'genres', 'averageRating'])

# Dividimos los géneros de la columna 'genres' en listas
anio_inicio['genres'] = anio_inicio['genres'].str.split(',')

# Utilizamos explode para crear una nueva fila por cada género de cada película
generos = anio_inicio.explode('genres')

# Agrupamos por 'genres' y calculamos el puntaje promedio
puntaje_promedio = generos.groupby('genres')['averageRating'].mean().reset_index(name='puntaje_promedio')

# Creamos el gráfico de barras
plt.figure(figsize=(12, 6))
plt.bar(puntaje_promedio['genres'], puntaje_promedio['puntaje_promedio'], color='skyblue')

plt.title('Puntaje Promedio por Género')
plt.xlabel('Género')
plt.ylabel('Puntaje Promedio')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

generosxanio_columnas = generosxanio.pivot_table(index='startYear', columns='genres', values='cant_peli', fill_value=0)
generosxanio_columnas = generosxanio_columnas.astype(int)
generosxanio_columnas

#5.2 Muestre la estadística anual para las películas en función de su género principal (el primero)
#filtro para peliculas hasta 2024
df5 = df5[df5['startYear'] <= 2024]

# Separamos solo el primer genero de cada pelicula
df5['gen_principal'] = df5['genres'].str.split(',').str[0]

# Agrupamos por 'startYear' y 'genero_principal' para obtener la estadística
gen_princ_anio = df5.groupby(['startYear', 'gen_principal']).size().reset_index(name='cant_peli')

# Si deseas ver la estadística
gen_princ_anio

gen_princ_anio_columnas = gen_princ_anio.pivot_table(index='startYear', columns='gen_principal', values='cant_peli', fill_value=0)
gen_princ_anio = gen_princ_anio_columnas.astype(int)
gen_princ_anio

def analisis_generos():
  data = df_peliculas()

  data['genres'] = data['genres'].str.split(',')

# Crear una nueva columna con el género principal
  data['main_genre'] = data['genres'].str[0]

# Estadísticas anuales por género (todos los géneros)
  genre_stats = data.explode('genres').groupby(['startYear', 'genres'])['primaryTitle'].count().unstack()
  display(genre_stats)

# Estadísticas anuales por género principal
  main_genre_stats = data.groupby(['startYear', 'main_genre'])['primaryTitle'].count().unstack()
  display(main_genre_stats)


# Analizar la dispersión de combinaciones de pares de género
  def generar_pares(row):
    if isinstance(row['genres'], list) and len(row['genres']) >= 2:
      for i in range(len(row['genres'])):
        for j in range(i + 1, len(row['genres'])):
          return (row['genres'][i], row['genres'][j])
    return None

  data['genre_pairs'] = data.apply(generar_pares, axis=1)
  genre_pair_counts = data['genre_pairs'].value_counts()
  display(genre_pair_counts)

analisis_generos()

"""###GRAFICOS

##Graficos lineales
"""

# Mostrar la cantidad de películas por año.
dfg1 = df_peliculas()
peli2024 = dfg1[dfg1['startYear'] <= 2024]

# Contar cuántas películas se lanzan cada año
pelixanio = peli2024['startYear'].value_counts().sort_index()

plt.figure(figsize=(12, 6))
plt.plot(pelixanio.index, pelixanio.values, marker='o', linestyle='-')

plt.title('Cantidad de películas lanzadas por año (1951-2024)')
plt.xlabel('Año')
plt.ylabel('Cantidad de películas')
plt.grid(True)

plt.show()

# Obtener el DataFrame
dfg12 = df_peliculas()

# Eliminar filas con NaN en 'Director_name'
directores = dfg12.dropna(subset=['Director_name'])

# Filtrar por años hasta 2024
dire2024 = directores[directores['startYear'] <= 2024]

# Agrupar por 'startYear' y contar directores únicos
directoresxanio = dire2024.groupby('startYear')['Director_name'].nunique().reset_index(name='cant_directores_distintos')

# Mostrar el resultado
print(directoresxanio)

dfg12 = df_peliculas()  # Obtener el DataFrame
directores = dfg12.dropna(subset=['Director_name'])  # Eliminar filas con NaN en 'Director_name'
dire2024 = directores[directores['startYear'] <= 2024]

directoresxanio = dire2024.groupby('startYear')['Director_name'].nunique().reset_index(name='cant_directores')

# Mostrar el resultado
print(directoresxanio)

import matplotlib.pyplot as plt

# Crear el gráfico de líneas
plt.figure(figsize=(12, 6))
plt.plot(directoresxanio['startYear'], directoresxanio['cant_directores'], marker='o')

# Personalizar el gráfico
plt.title('Cantidad de Directores/as Diferentes por Año')
plt.xlabel('Año')
plt.ylabel('Cantidad de Directores/as')

# Mostrar solo algunos años en el eje x
plt.xticks(directoresxanio['startYear'], rotation=80)  # Muestra un año cada dos
plt.grid()
plt.tight_layout()  # Ajustar el diseño

# Mostrar el gráfico
plt.show()

"""##Graficos de barras"""

#5.1 Muestre la estadística anual para cada tipo diferente de género
dfg21 = df_peliculas()

#filtramos hasta el año 2024
dfg21 = dfg21[dfg21['startYear'] <= 2024]
#eliminamos todas las filas que contengan datos vacios
anio_inicio = dfg21.dropna(subset=['startYear'])

#dividimos los generos de la columna anio_inicio en listas
anio_inicio['genres'] = anio_inicio['genres'].str.split(',')

# Utilizamos explode para crear una nueva fila por cada género de cada película
generos = anio_inicio.explode('genres')

# Agrupamos por 'startYear' y 'genres' para obtener la estadística
generosxanio = generos.groupby(['startYear', 'genres']).size().reset_index(name='cant_peli')

plt.figure(figsize=(12, 6))
for genre in generosxanio['genres'].unique():
    subset = generosxanio[generosxanio['genres'] == genre]
    plt.bar(subset['startYear'], subset['cant_peli'], label=genre)

plt.title('Cantidad de Películas por Género por Año')
plt.xlabel('Año')
plt.ylabel('Cantidad de Películas')
plt.xticks(rotation=45)
plt.legend(title='Género', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

dfg22 = df_peliculas()

# Filtramos hasta el año 2024
dfg22 = dfg22[dfg22['startYear'] <= 2024]
# Eliminamos filas con datos vacíos
anio_inicio = dfg22.dropna(subset=['startYear', 'genres', 'averageRating'])

# Dividimos los géneros de la columna 'genres' en listas
anio_inicio['genres'] = anio_inicio['genres'].str.split(',')

# Utilizamos explode para crear una nueva fila por cada género de cada película
generos = anio_inicio.explode('genres')

# Agrupamos por 'genres' y calculamos el puntaje promedio
puntaje_promedio = generos.groupby('genres')['averageRating'].mean().reset_index(name='puntaje_promedio')

# Creamos el gráfico de barras
plt.figure(figsize=(12, 6))
plt.bar(puntaje_promedio['genres'], puntaje_promedio['puntaje_promedio'], color='skyblue')

plt.title('Puntaje Promedio por Género')
plt.xlabel('Género')
plt.ylabel('Puntaje Promedio')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""##Graficos de torta"""

def graf_torta():
  data = df_peliculas()

  data['genres'] = data['genres'].str.split(',')
  data['main_genre'] = data['genres'].str[0]
  genre_proportions = data.groupby(['startYear', 'main_genre'])['primaryTitle'].count().unstack()
  for year in genre_proportions.index:
        # Drop NaN values before plotting the pie chart
      genre_data = genre_proportions.loc[year].dropna()

        # Check if there's data to plot after dropping NaNs
      if not genre_data.empty:
          plt.figure(figsize=(8, 8))

            #Ajusta el tamaño de la torta

          # Generate a list of colors using a colormap
          num_genres = len(genre_data)
          cmap = plt.get_cmap('viridis')  # Choose a colormap
          colors = [cmap(i / num_genres) for i in range(num_genres)]

          wedges, texts, autotexts = plt.pie(genre_data, autopct='%1.1f%%',
                                    textprops={'fontsize': 10}, startangle=90,
                                    pctdistance=0.85, colors=colors)  # Use generated colors

# Crear una leyenda personalizada con colores
          legend_elements = [plt.Line2D([0], [0], marker='o', color='w', label=genre,
                              markerfacecolor=colors[i], markersize=10)
                              for i, genre in enumerate(genre_data.index)]

          plt.legend(handles=legend_elements, title='Géneros', loc='center left', bbox_to_anchor=(1, 0, 0.5, 1))
            # Rotar etiquetas para mejor legibilidad
          plt.setp(autotexts, size=8, weight="bold")
          plt.setp(texts, size=10)

            # Agregar un círculo blanco en el centro para que las etiquetas se vean mejor
          centre_circle = plt.Circle((0,0),0.70,fc='white')
          fig = plt.gcf()
          fig.gca().add_artist(centre_circle)

          plt.title(f'Proporción de Géneros en el Año {year}')
          plt.show()
      else:
          print(f"No data available for year {year} to create pie chart.")

graf_torta()

""""" Mapa de Dispersion

"""

def mapa_dispersion():
    data = df_peliculas()
    # Ensure 'runtimeMinutes' and 'averageRating' are of numeric type
    data['runtimeMinutes'] = pd.to_numeric(data['runtimeMinutes'], errors='coerce')
    data['averageRating'] = pd.to_numeric(data['averageRating'], errors='coerce')

    # Drop rows with missing values in the relevant columns before grouping
    data = data.dropna(subset=['runtimeMinutes', 'averageRating'])

    # Group by 'runtimeMinutes' and 'averageRating' and get a list of 'primaryTitle' for each group
    df = data.groupby(['runtimeMinutes', 'averageRating'])['primaryTitle'].apply(list).reset_index()

    # Explode the 'primaryTitle' column to have one row per title
    df = df.explode('primaryTitle')

    # Drop rows with NaN values in 'primaryTitle' if any
    df.dropna(inplace=True)

    plt.figure(figsize=(10, 6))
    plt.scatter(df['runtimeMinutes'], df['averageRating'])
    plt.title('Relación entre Duración y Puntaje')
    plt.xlabel('Duración (minutos)')
    plt.ylabel('Puntaje')
    plt.show()

    plt.figure(figsize=(10, 6))
    plt.scatter(data['startYear'], data['averageRating'])
    plt.title('Relación entre Año de Lanzamiento y Puntaje')
    plt.xlabel('Año de Lanzamiento')
    plt.ylabel('Puntaje Promedio')
    plt.show()

mapa_dispersion()

"""# Histogramas

"""

def mostrar_distribucion_puntajes():
  data = df_peliculas()
  plt.figure(figsize=(10, 6))
  plt.hist(data['averageRating'], bins=20, edgecolor='black')
  plt.title('Distribución de Puntajes')
  plt.xlabel('Puntaje')
  plt.ylabel('Frecuencia')
  plt.show()


  # o	Mostrar la distribución de las duraciones
  data['runtimeMinutes'] = pd.to_numeric(data['runtimeMinutes'], errors='coerce')
  data = data.dropna(subset=['runtimeMinutes'])
  data['runtimeMinutes'].reset_index(drop=True, inplace=True)
  plt.figure(figsize=(10, 6))
  plt.hist(data['runtimeMinutes'], edgecolor='black')
  plt.title('Distribución de Duraciones')
  plt.xlabel('Duración (minutos)')
  plt.ylabel('Frecuencia')
  plt.show()

mostrar_distribucion_puntajes()

def analisis_generos_primer_genero():
  data = df_peliculas()
  data['genres'] = data['genres'].str.split(',')
  data['main_genre'] = data['genres'].str[0]  # Consider only the first genre

  # Group by year and main genre and count movies
  genre_counts_by_year = data.groupby(['startYear', 'main_genre'])['primaryTitle'].count().unstack()

  # Plot the results
  genre_counts_by_year.plot(kind='bar', figsize=(15, 8), title='Cantidad de Películas en cada Género por Año (Primer Género)')

  plt.title('Cantidad de Películas en cada Género por Año (Primer Género)')
  plt.xlabel('Año')
  plt.ylabel('Cantidad de Películas')
  plt.xticks(rotation=45, ha='right')
  plt.legend(title='Género')
  plt.show()

analisis_generos_primer_genero()